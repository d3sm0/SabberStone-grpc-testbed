syntax = "proto3";
option csharp_namespace = "SabberStonePython.API";
//import "google/protobuf/empty.proto";
message Empty {

}

service SabberStonePython {
    rpc NewGame(DeckStrings) returns (Game) {}
    rpc GetOptions(GameId) returns (Options) {}
	rpc Process(Option) returns (Game) {}
    rpc GetCardDictionary(Empty) returns (Cards) {}
    rpc Reset(GameId) returns (Game);
    //rpc GetEntityFromId(EntityId) returns () {}
}

service ServerHandle {
    rpc Close(Empty) returns (Empty) {}
}

service MatchService {
	rpc Initialise(MatchRequest) returns (Empty) {}
	// Wait until queueing ends and return the initial state.
	rpc Queue(QueueRequest) returns (Empty) {}
	rpc GetState(Empty) returns (Game) {}
	rpc SendOption(Option) returns (Empty) {}
}

service DotnetAIService {
    rpc Request(DotnetAIRequest) returns (DotnetAIResponse) {}
	rpc SendPythonAIOption(Option) returns (Game) {}
}

message DotnetAIRequest {
    string dotnet_ai_name = 1;
    string dotnet_ai_deckstring = 2;
    string python_ai_deckstring = 3;
    bool history = 4;
    int64 seed = 5;
}

message DotnetAIResponse {
	enum Type {
		SUCCESS = 0;
		NOT_FOUND = 1;
		OCCUPIED = 2;
		INVALID_DECKSTRING = 3;
	}
	Type type = 1;
	Game game = 2;
}

service PythonAIInterface {
	rpc GetMove(Game) returns (Option) {}
}

message MatchRequest {
	string ip = 1;
	int32 port = 2;
	string id = 3;
	string password = 4;
}

message QueueRequest {
	string deckstring = 1;
	string id = 2;
	string password = 3;
}

message GameId {
    int32 value = 1;
}

message EntityId {
    int32 value = 1;
}

message Option {
    enum PlayerTaskType {
        CHOOSE = 0;
        CONCEDE = 1;
        END_TURN = 2;
        HERO_ATTACK = 3;
        HERO_POWER = 4;
        MINION_ATTACK = 5;
        PLAY_CARD = 6;
    }
    PlayerTaskType type = 1;
    int32 source_id = 2;
    int32 target_id = 3;
    int32 sub_option = 4;
    //int32 zone_position = 5;
    int32 choice = 6;

    int32 game_id = 7;
    string print = 8;

    int32 source_position = 9;
    int32 target_position = 10;

	bool is_spell = 11;
}

message Options {
    repeated Option list = 1;
}

message GameTag {
    
}

message Card {
    int32 id = 1;
    string string_id = 2;
    string name = 3;
    // entourage
    // play requirements
    repeated GameTag tags = 4;
}


message Cards {
    map<int32, Card> cards = 1;
}

message DeckStrings {
    string deck1 = 1;
    string deck2 = 2;
}

message Game {
    GameId id = 1;
    Controller CurrentPlayer = 2;
    Controller CurrentOpponent = 3;
    enum State {
        INVALID = 0;
        LOADING = 1;
        RUNNING = 2;
        COMPLETE = 3;
    }
    State state = 4;
    int32 turn = 5;
}

message Controller {
    int32 id = 1;
    Hero hero = 2;
    BoardZone board_zone = 3;
    HandZone hand_zone = 4;
    SecretZone secret_zone = 5;
    DeckZone deck_zone = 6;
    enum PlayState {
        INVALID = 0;
        PLAYING = 1;
        WON = 4;
        LOST = 5;
        TIED = 6;
    }
    PlayState play_state = 7;
    int32 base_mana = 8;
    int32 remaining_mana = 9;
    int32 overload_locked = 10;
    int32 overload_owed = 11;
}

message BoardZone {
    repeated Minion minions = 1;
}

message Minion {
    int32 card_id = 1;
    int32 atk = 2;
    int32 base_health = 3;
    int32 damage = 4;
    int32 num_attacks_this_turn = 5;
    bool exhausted = 6;
    bool attackable_by_rush = 7;
    bool charge = 8;
    bool windfury = 9;
    bool lifesteal = 10;
    bool poisonous = 11;
    bool stealth = 12;
    bool divine_shield = 13;
    bool immune = 14;
    bool elusive = 15;
    bool frozen = 16;
    bool deathrattle = 17;
    bool taunt = 18;
    // race
    // trigger or aura
    // enchantments
    int32 zone_position = 25;
    int32 order_of_play = 26;
}

message HandZone {
    repeated Playable entities = 1;
}

message SecretZone {
    repeated Playable entities = 1;
}

message DeckZone {
    repeated Playable entities = 1;
}

message Playable {
    int32 card_id = 1;
    int32 cost = 2;
    int32 atk = 3;
    int32 base_health = 4;
    bool ghostly = 5;
}

message Hero {
    int32 card_class = 1;
    int32 atk = 2;
    int32 base_health = 3;
    int32 damage = 4;
    int32 num_attacks_this_turn = 5;
    int32 armor = 20;
    bool exhausted = 6;
    bool stealth = 12;
    bool immune = 14;
    HeroPower power = 15;
    Weapon weapon = 16;
    // fatigue
}

message HeroPower {
    int32 card_id = 1;
    int32 cost = 2;
    bool exhausted = 3;
}

message Weapon {
    int32 card_id = 1;
    int32 atk = 2;
    int32 durability = 3;
    int32 damage = 4;
    bool windfury = 9;
    bool lifesteal = 10;
    bool poisonous = 11;
    bool immune = 14;
}
